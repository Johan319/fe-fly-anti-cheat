local localPlayer = game:GetService("Players").LocalPlayer
local isFlyActive = false
local flySpeed = 100  -- Set default fly speed to 100
local camera = workspace.CurrentCamera

-- Movement logic for CFly
local uis = game:GetService("UserInputService")

-- Function to handle G key press for flying toggle
uis.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end -- Ignore if the game has processed the input (e.g., UI buttons)

    if input.KeyCode == Enum.KeyCode.G then
        isFlyActive = not isFlyActive  -- Toggle flying state on G press
        print("Flying state: ", isFlyActive)  -- Debugging output
    end
end)

while true do
    task.wait()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart
        
        -- Fly functionality (CFrame-based movement)
        if isFlyActive then
            local currentPos = hrp.Position
            local lookAtPos = currentPos + camera.CFrame.LookVector * 10 -- Adjust multiplier for smoother movement
            hrp.CFrame = CFrame.new(currentPos, lookAtPos) -- Align character to camera's look vector

            local flyDirection = Vector3.zero

            -- Check movement inputs (W, A, S, D)
            if uis:IsKeyDown(Enum.KeyCode.W) then
                flyDirection += camera.CFrame.LookVector
            end
            if uis:IsKeyDown(Enum.KeyCode.S) then
                flyDirection -= camera.CFrame.LookVector
            end
            if uis:IsKeyDown(Enum.KeyCode.A) then
                flyDirection -= camera.CFrame.RightVector
            end
            if uis:IsKeyDown(Enum.KeyCode.D) then
                flyDirection += camera.CFrame.RightVector
            end

            -- Normalize and apply movement
            if flyDirection.Magnitude > 0 then
                flyDirection = flyDirection.Unit
            end
            hrp.Velocity = flyDirection * flySpeed
        end
    end
end
