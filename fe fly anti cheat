-- Simplified CFrame Fly (CFly) Functionality
local localPlayer = game:GetService("Players").LocalPlayer
local isFlyActive = false
local flySpeed = 1
local camera = workspace.CurrentCamera
local humanoid = nil

-- CFrame Fly Toggle and Keybind
local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.F then  -- Toggle fly on/off with "F"
        isFlyActive = not isFlyActive
    end
end)

-- CFrame Fly Speed Slider (default speed set to 1)
local function setFlySpeed(value)
    flySpeed = value
end

setFlySpeed(1)  -- Default fly speed is 1

-- Movement logic for CFly
local function handleFlyMovement()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart

        -- Fly functionality (CFrame-based movement)
        if isFlyActive then
            local currentPos = hrp.Position
            local lookAtPos = currentPos + camera.CFrame.LookVector * 100
            hrp.CFrame = CFrame.new(currentPos, lookAtPos)
            local flyDirection = Vector3.zero
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                flyDirection += camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                flyDirection -= camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                flyDirection -= camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                flyDirection += camera.CFrame.RightVector
            end

            if flyDirection.Magnitude > 0 then
                flyDirection = flyDirection.Unit
            end
            hrp.Velocity = flyDirection * flySpeed
        end
    end
end

while true do
    task.wait(0.1)  -- Small delay for efficient loop
    handleFlyMovement()
end
